<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <title>Data Table</title>
    <style>
        .inputcontmine>*:not(label):not(button) {
            margin-left: 1.4%;
            margin-right: 1.4%;
        }

        a {
            text-decoration: none;
            padding: 5px;
            background-color: rgb(236, 227, 227);
            border-radius: 8.5px;
        }

        .active {
            color: red;
            font-size: 1.5em;
        }

        a:active,
        a:focus,
        a:hover {
            color: red;
            text-decoration: none;
        }

        #nav {
            text-align: center;
        }

        .hide {
            display: none;
        }

        .display {
            display: inline;
        }

        th,
        td {
            padding-top: 2px;
            padding-bottom: 2px;
            padding-left: 4% !important;
            min-width: 170px !important;
            max-width: 170px !important;
        }

        th:first-child,
        td:first-child {
            min-width: 450px !important;
            max-width: 450px !important;
        }

       /* tr:nth-child(odd) {
            background: #CCC
        }

        th{
            background-color: rgb(214, 96, 96);
        }

        tr:nth-child(even) {
            background: #FFF
        }*/

        *::selection{
            background-color: rgb(176, 189, 87);
        }

        table {
            border-collapse: separate !important;
        }
    </style>
</head>

<body>
    <div class="container inputcontmine" style="margin-bottom: 2%; margin-top: 2%;">
        <label id="firstlabel" for="startdate">Start date : </label>
        <input id="startdate" type="datetime-local">

        <label for="enddate">End date : </label>
        <input id="enddate" type="datetime-local">

        <button id="filterbtn">Submit</button>
    </div>
    <div class="container">
        <table id="data" class="table">
            <thead>
                <tr>
                    <th id="header_date" onclick="sortTable(0);">Date</th>
                    <th id="header_voltage" onclick="sortTable(1);">Voltage</th>
                    <th id="header_amper" onclick="sortTable(2);">Amper</th>
                    <th id="header_watt" onclick="sortTable(3);">Watt</th>
                </tr>
            </thead>
            <tbody id="dynamictabledata">
                <!-- Dynamic Content-->
            </tbody>
        </table>
    </div>

    <script>

        let startDate = document.getElementById('startdate');
        let endDate = document.getElementById('enddate');
        let dynamicTBody = document.getElementById("dynamictabledata");

        console.log(new Date().toISOString().replace(" ", "T").slice(0, 16).replaceAll(".", "-"));

        let timeStart = new Date();
        timeStart.setUTCHours(0, 0, 0, 0);

        startDate.value = timeStart.toISOString().replace(" ", "T").slice(0, 16).replaceAll(".", "-");
        endDate.value = new Date().toISOString().replace(" ", "T").slice(0, 16).replaceAll(".", "-")

        let filterbtn = document.getElementById("filterbtn");
        filterbtn.onclick = () => {
            dynamicTBody.innerHTML = "";
            console.log(startDate.value);
            fetch(`http://localhost:3000/api/data/get2?startdate=${startDate.value}&enddate=${endDate.value}`)
                .then(response => response.json())
                .then(result => {

                    for (let a of result.data) {
                        let toAdd = addTr(a.date, a.voltage, a.amper, a.watt)
                        dynamicTBody.innerHTML += toAdd;
                    }

                    var el = document.getElementById('nav');
                    el.parentNode.removeChild(el);

                    f();

                });
        };

        let f = () => {
            $('#data').after('<div id="nav"></div>');
            var rowsShown = 10;
            var rowsTotal = $('#data tbody tr').length;
            var numPages = rowsTotal / rowsShown;
            for (i = 0; i < numPages; i++) {
                var pageNum = i + 1;
                $('#nav').append('<a href="#" rel="' + i + '">' + pageNum + '</a> ');
            }
            $('#data tbody tr').hide();
            $('#data tbody tr').slice(0, rowsShown).show();
            $('#nav a:first').addClass('active');
            $('#nav a').bind('click', function () {

                $('#nav a').removeClass('active');
                $(this).addClass('active');
                var currPage = $(this).attr('rel');
                var startItem = currPage * rowsShown;
                var endItem = startItem + rowsShown;
                $('#data tbody tr').css('opacity', '1.0').hide().slice(startItem, endItem).
                    css('display', 'table-row').animate({ opacity: 1 }, 300);
            });

            for (let i = 1; i < document.getElementsByTagName("a").length - 1; i++) {
                $(`#nav a:nth-child(${i + 1})`).removeClass('active');
                if (i > 9)
                    $(`#nav a:nth-child(${i + 1})`).addClass("hide");
                $(`#nav a:nth-child(${i + 1})`).removeClass("display");
            }

            document.getElementById("nav").onclick = () => {
                let activeElement = document.getElementsByClassName("active")[0];
                let activeNumber = activeElement.getAttribute("rel");
                for (let i = 1; i < document.getElementsByTagName("a").length - 1; i++) {
                    if (i + 5 < activeNumber) {
                        $(`#nav a:nth-child(${i + 1})`).addClass("hide");
                        $(`#nav a:nth-child(${i + 1})`).removeClass("display");

                    } else if (i - 4 <= activeNumber) {
                        $(`#nav a:nth-child(${i + 1})`).addClass("display");
                        $(`#nav a:nth-child(${i + 1})`).removeClass("hide");

                    } else {
                        $(`#nav a:nth-child(${i + 1})`).removeClass("display");
                        $(`#nav a:nth-child(${i + 1})`).addClass("hide");
                    }
                }
            };
        }


        let addTr = (date, voltage, amper, watt) => {

            let res = "";

            let halfs = date.split(" ");
            let firstHalf = halfs[0];
            let secondHalf = halfs[1];

            let firstHalfArr = firstHalf.split("-");
            for (let i = firstHalfArr.length - 1; i >= 0; i--) {
                if (i == 0) { res += (firstHalfArr[i]); break; }
                res += (firstHalfArr[i] + "-");
            }

            res = res + " " + secondHalf;
            date = res;

            return `<tr>
                
                <td>${date}</td>
                <td>${voltage}</td>
                <td>${amper}</td>
                <td>${watt}</td>

                </tr>`;
        };


        fetch("http://localhost:3000/api/data/get")
            .then(response => response.json())
            .then(result => {
                for (let a of result.data) {
                    let toAdd = addTr(a.date, a.voltage, a.amper, a.watt)
                    dynamicTBody.innerHTML += toAdd;
                }
            });




        function setArrowOfClickedTableHeadElement(n, isAsc) {

            let header_date = document.getElementById("header_date");
            let header_voltage = document.getElementById("header_voltage");
            let header_amper = document.getElementById("header_amper");
            let header_watt = document.getElementById("header_watt");

            header_date.innerHTML = "Date";
            header_voltage.innerHTML = "Voltage";
            header_amper.innerHTML = "Amper";
            header_watt.innerHTML = "Watt";

            let clickedElement;
            switch (n) {
                case 0:
                    clickedElement = header_date;
                    break;
                case 1:
                    clickedElement = header_voltage;
                    break;
                case 2:
                    clickedElement = header_amper;
                    break;
                case 3:
                    clickedElement = header_watt;
            }

            clickedElement.innerHTML += (isAsc ? " ↑" : " ↓");
        }

        // https://www.w3schools.com/howto/howto_js_sort_table.asp
        function sortTable(n) {





            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("data");
            switching = true;
            // Set the sorting direction to ascending:
            dir = "asc";
            /* Make a loop that will continue until
            no switching has been done: */
            while (switching) {
                // Start by saying: no switching is done:
                switching = false;
                rows = table.rows;
                /* Loop through all table rows (except the
                first, which contains table headers): */
                for (i = 1; i < (rows.length - 1); i++) {
                    // Start by saying there should be no switching:
                    shouldSwitch = false;
                    /* Get the two elements you want to compare,
                    one from current row and one from the next: */
                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];
                    /* Check if the two rows should switch place,
                    based on the direction, asc or desc: */
                    if (dir == "asc") {

                        setArrowOfClickedTableHeadElement(n, true);

                        try {
                            let double_x = eval(x.innerHTML);
                            let double_y = eval(y.innerHTML);


                            if (double_x > double_y) {
                                shouldSwitch = true;
                                break;
                            }
                        }
                        catch (err) {
                            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                                // If so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }



                    } else if (dir == "desc") {
                        setArrowOfClickedTableHeadElement(n, false);

                        try {
                            let double_x = eval(x.innerHTML);
                            let double_y = eval(y.innerHTML);

                            if (double_x < double_y) {
                                shouldSwitch = true;
                                break;
                            }
                        }
                        catch (err) {
                            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                                // If so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }


                    }
                }
                if (shouldSwitch) {
                    /* If a switch has been marked, make the switch
                    and mark that a switch has been done: */
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    // Each time a switch is done, increase this count by 1:
                    switchcount++;
                } else {
                    /* If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again. */
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }

                }
            }


            var rowsShown = 10;
            var rowsTotal = $('#data tbody tr').length;
            var numPages = rowsTotal / rowsShown;

            $('#data tbody tr').hide();
            $('#data tbody tr').slice(0, rowsShown).show();
            $('#nav a:first').addClass('active');
            $('#nav a').bind('click', function () {
                var currPage = $(this).attr('rel');
                var startItem = currPage * rowsShown;
                var endItem = startItem + rowsShown;

            });

            if (document.querySelectorAll("#nav").length > 1) {
                var el = document.getElementById('nav');
                el.parentNode.removeChild(el);
            }


            for (let i = 1; i < document.getElementsByTagName("a").length; i++) {
                console.log('#nav a:nth-child(${i+1})');
                $(`#nav a:nth-child(${i + 1})`).removeClass('active');
                if (i > 9 && i != document.getElementsByTagName("a").length - 1)
                    $(`#nav a:nth-child(${i + 1})`).addClass("hide");
            }

            let activeElement = document.getElementsByClassName("active")[0];
            let activeNumber = activeElement.getAttribute("rel");
            for (let i = 1; i < document.getElementsByTagName("a").length - 1; i++) {
                if (i + 5 < activeNumber) {
                    $(`#nav a:nth-child(${i + 1})`).addClass("hide");
                    $(`#nav a:nth-child(${i + 1})`).removeClass("display");

                } else if (i - 4 <= activeNumber) {
                    $(`#nav a:nth-child(${i + 1})`).addClass("display");
                    $(`#nav a:nth-child(${i + 1})`).removeClass("hide");

                } else {
                    $(`#nav a:nth-child(${i + 1})`).removeClass("display");
                    $(`#nav a:nth-child(${i + 1})`).addClass("hide");
                }
            }

        }
    </script>


    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
    <script type="text/javascript" src="http://cdn.datatables.net/1.10.2/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>

    <script>

        $(document).ready(function () {
            f();
        });




    </script>

</body>

</html>